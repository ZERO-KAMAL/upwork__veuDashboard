{"remainingRequest":"C:\\Users\\Kamal\\Desktop\\upwork\\zafar sir\\frontend_insurance\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Kamal\\Desktop\\upwork\\zafar sir\\frontend_insurance\\src\\views\\dashboard\\admin-modules\\Policies\\PoliciesListAddNew.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"C:\\Users\\Kamal\\Desktop\\upwork\\zafar sir\\frontend_insurance\\src\\views\\dashboard\\admin-modules\\Policies\\PoliciesListAddNew.vue","mtime":1653043181168},{"path":"C:\\Users\\Kamal\\Desktop\\upwork\\zafar sir\\frontend_insurance\\node_modules\\css-loader\\dist\\cjs.js","mtime":1653043260894},{"path":"C:\\Users\\Kamal\\Desktop\\upwork\\zafar sir\\frontend_insurance\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1653043267607},{"path":"C:\\Users\\Kamal\\Desktop\\upwork\\zafar sir\\frontend_insurance\\node_modules\\postcss-loader\\src\\index.js","mtime":1653043263711},{"path":"C:\\Users\\Kamal\\Desktop\\upwork\\zafar sir\\frontend_insurance\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1653043258712},{"path":"C:\\Users\\Kamal\\Desktop\\upwork\\zafar sir\\frontend_insurance\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1653043258756},{"path":"C:\\Users\\Kamal\\Desktop\\upwork\\zafar sir\\frontend_insurance\\node_modules\\vue-loader\\lib\\index.js","mtime":1653043264822}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQpAaW1wb3J0ICdAY29yZS9zY3NzL3Z1ZS9saWJzL3Z1ZS1zZWxlY3Quc2Nzcyc7DQoNCiNhZGQtbmV3LXBvbGljaWVzLXNpZGViYXIgew0KICAudnNfX2Ryb3Bkb3duLW1lbnUgew0KICAgIG1heC1oZWlnaHQ6IDIwMHB4ICFpbXBvcnRhbnQ7DQogIH0NCn0NCg=="},{"version":3,"sources":["PoliciesListAddNew.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgQA;;AAEA;AACA;AACA;AACA;AACA","file":"PoliciesListAddNew.vue","sourceRoot":"src/views/dashboard/admin-modules/Policies","sourcesContent":["<template>\r\n  <b-sidebar\r\n    id=\"add-new-policies-sidebar\"\r\n    :visible=\"isAddNewUserSidebarActive\"\r\n    bg-variant=\"white\"\r\n    sidebar-class=\"sidebar-lg\"\r\n    shadow\r\n    backdrop\r\n    no-header\r\n    right\r\n    @hidden=\"resetForm\"\r\n    @change=\"(val) => $emit('update:is-add-new-policies-sidebar-active', val)\"\r\n  >\r\n    <template #default=\"{ hide }\">\r\n      <!-- Header -->\r\n      <div class=\"d-flex justify-content-between align-items-center content-sidebar-header px-2 py-1\">\r\n        <h5 class=\"mb-0\">\r\n          User Manager :: New\r\n        </h5>\r\n\r\n        <feather-icon\r\n          class=\"ml-1 cursor-pointer\"\r\n          icon=\"XIcon\"\r\n          size=\"16\"\r\n          @click=\"hide\"\r\n        />\r\n\r\n      </div>\r\n\r\n      <!-- BODY -->\r\n      <validation-observer\r\n        #default=\"{ handleSubmit }\"\r\n        ref=\"refFormObserver\"\r\n      >\r\n        <!-- Form -->\r\n        <b-form\r\n          class=\"p-2\"\r\n          @submit.prevent=\"handleSubmit(onSubmit)\"\r\n          @reset.prevent=\"resetForm\"\r\n        >\r\n          <!-- Email -->\r\n          <validation-provider\r\n            #default=\"validationContext\"\r\n            name=\"Email\"\r\n            rules=\"required|email\"\r\n          >\r\n            <b-form-group\r\n              label=\"Email\"\r\n              label-for=\"email\"\r\n            >\r\n              <b-form-input\r\n                id=\"email\"\r\n                v-model=\"userData.email\"\r\n                :state=\"getValidationState(validationContext)\"\r\n                trim\r\n              />\r\n\r\n              <b-form-invalid-feedback>\r\n                {{ validationContext.errors[0] }}\r\n              </b-form-invalid-feedback>\r\n            </b-form-group>\r\n          </validation-provider>\r\n\r\n          <!-- Username -->\r\n          <validation-provider\r\n            #default=\"validationContext\"\r\n            name=\"Username\"\r\n            rules=\"required|alpha-num\"\r\n          >\r\n            <b-form-group\r\n              label=\"Username\"\r\n              label-for=\"username\"\r\n            >\r\n              <b-form-input\r\n                id=\"username\"\r\n                v-model=\"userData.username\"\r\n                :state=\"getValidationState(validationContext)\"\r\n                trim\r\n              />\r\n\r\n              <b-form-invalid-feedback>\r\n                {{ validationContext.errors[0] }}\r\n              </b-form-invalid-feedback>\r\n            </b-form-group>\r\n          </validation-provider>\r\n\r\n          <!-- Status -->\r\n          <validation-provider\r\n            #default=\"validationContext\"\r\n            name=\"Status\"\r\n            rules=\"required\"\r\n          >\r\n            <b-form-group\r\n              label=\"Status\"\r\n              label-for=\"status\"\r\n              :state=\"getValidationState(validationContext)\"\r\n            >\r\n              <v-select\r\n                v-model=\"userData.usertypeOptions\"\r\n                :dir=\"$store.state.appConfig.isRTL ? 'rtl' : 'ltr'\"\r\n                :options=\"usertypeOptions\"\r\n                :reduce=\"val => val.value\"\r\n                :clearable=\"false\"\r\n                input-id=\"status\"\r\n              />\r\n              <b-form-invalid-feedback :state=\"getValidationState(validationContext)\">\r\n                {{ validationContext.errors[0] }}\r\n              </b-form-invalid-feedback>\r\n            </b-form-group>\r\n          </validation-provider>\r\n\r\n          <validation-provider\r\n            #default=\"validationContext\"\r\n            name=\"User Type\"\r\n            rules=\"required\"\r\n          >\r\n            <b-form-group\r\n              label=\"User Type\"\r\n              label-for=\"usertypeOptions\"\r\n              :state=\"getValidationState(validationContext)\"\r\n            >\r\n              <v-select\r\n                v-model=\"userData.usertypeOptions\"\r\n                :dir=\"$store.state.appConfig.isRTL ? 'rtl' : 'ltr'\"\r\n                :options=\"usertypeOptions\"\r\n                :reduce=\"val => val.value\"\r\n                :clearable=\"false\"\r\n                input-id=\"usertypeOptions\"\r\n              />\r\n              <b-form-invalid-feedback :state=\"getValidationState(validationContext)\">\r\n                {{ validationContext.errors[0] }}\r\n              </b-form-invalid-feedback>\r\n            </b-form-group>\r\n          </validation-provider>\r\n\r\n          <div class=\"d-flex mt-2\">\r\n            <b-button\r\n              v-ripple.400=\"'rgba(255, 255, 255, 0.15)'\"\r\n              variant=\"primary\"\r\n              class=\"mr-2\"\r\n              type=\"submit\"\r\n            >\r\n              Add\r\n            </b-button>\r\n            <b-button\r\n              v-ripple.400=\"'rgba(186, 191, 199, 0.15)'\"\r\n              type=\"button\"\r\n              variant=\"outline-secondary\"\r\n              @click=\"hide\"\r\n            >\r\n              Cancel\r\n            </b-button>\r\n          </div>\r\n\r\n        </b-form>\r\n      </validation-observer>\r\n    </template>\r\n  </b-sidebar>\r\n</template>\r\n\r\n<script>\r\nimport {\r\n  BSidebar, BForm, BFormGroup, BFormInput, BFormInvalidFeedback, BButton,\r\n} from 'bootstrap-vue'\r\nimport { ValidationProvider, ValidationObserver } from 'vee-validate'\r\nimport { ref } from '@vue/composition-api'\r\nimport { required, alphaNum, email } from '@validations'\r\nimport formValidation from '@core/comp-functions/forms/form-validation'\r\nimport Ripple from 'vue-ripple-directive'\r\nimport vSelect from 'vue-select'\r\nimport countries from '@/@fake-db/data/other/countries'\r\nimport store from '@/store'\r\n\r\nexport default {\r\n  components: {\r\n    BSidebar,\r\n    BForm,\r\n    BFormGroup,\r\n    BFormInput,\r\n    BFormInvalidFeedback,\r\n    BButton,\r\n    vSelect,\r\n\r\n    // Form Validation\r\n    ValidationProvider,\r\n    ValidationObserver,\r\n  },\r\n  directives: {\r\n    Ripple,\r\n  },\r\n  model: {\r\n    prop: 'isAddNewUserSidebarActive',\r\n    event: 'update:is-add-new-policies-sidebar-active',\r\n  },\r\n  props: {\r\n    isAddNewUserSidebarActive: {\r\n      type: Boolean,\r\n      required: true,\r\n    },\r\n    usertypeOptions: {\r\n      type: Array,\r\n      required: true,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      required,\r\n      alphaNum,\r\n      email,\r\n      countries,\r\n    }\r\n  },\r\n  setup(props, { emit }) {\r\n    const blankUserData = {\r\n      fullName: '',\r\n      username: '',\r\n      email: '',\r\n      usertypeOptions: null,\r\n      currentPlan: null,\r\n      company: '',\r\n      country: '',\r\n      contact: '',\r\n    }\r\n\r\n    const userData = ref(JSON.parse(JSON.stringify(blankUserData)))\r\n    const resetuserData = () => {\r\n      userData.value = JSON.parse(JSON.stringify(blankUserData))\r\n    }\r\n\r\n    const onSubmit = () => {\r\n      store.dispatch('app-user/addUser', userData.value)\r\n        .then(() => {\r\n          emit('refetch-data')\r\n          emit('update:is-add-new-policies-sidebar-active', false)\r\n        })\r\n    }\r\n\r\n    const {\r\n      refFormObserver,\r\n      getValidationState,\r\n      resetForm,\r\n    } = formValidation(resetuserData)\r\n\r\n    return {\r\n      userData,\r\n      onSubmit,\r\n\r\n      refFormObserver,\r\n      getValidationState,\r\n      resetForm,\r\n    }\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import '@core/scss/vue/libs/vue-select.scss';\r\n\r\n#add-new-policies-sidebar {\r\n  .vs__dropdown-menu {\r\n    max-height: 200px !important;\r\n  }\r\n}\r\n</style>\r\n"]}]}