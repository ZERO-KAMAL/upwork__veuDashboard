{"remainingRequest":"C:\\Users\\Kamal\\Desktop\\upwork\\zafar sir\\frontend_insurance\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Kamal\\Desktop\\upwork\\zafar sir\\frontend_insurance\\src\\views\\apps\\chat\\Chat.vue?vue&type=style&index=1&lang=scss&","dependencies":[{"path":"C:\\Users\\Kamal\\Desktop\\upwork\\zafar sir\\frontend_insurance\\src\\views\\apps\\chat\\Chat.vue","mtime":1653043180854},{"path":"C:\\Users\\Kamal\\Desktop\\upwork\\zafar sir\\frontend_insurance\\node_modules\\css-loader\\dist\\cjs.js","mtime":1653043260894},{"path":"C:\\Users\\Kamal\\Desktop\\upwork\\zafar sir\\frontend_insurance\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1653043267607},{"path":"C:\\Users\\Kamal\\Desktop\\upwork\\zafar sir\\frontend_insurance\\node_modules\\postcss-loader\\src\\index.js","mtime":1653043263711},{"path":"C:\\Users\\Kamal\\Desktop\\upwork\\zafar sir\\frontend_insurance\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1653043258712},{"path":"C:\\Users\\Kamal\\Desktop\\upwork\\zafar sir\\frontend_insurance\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1653043258756},{"path":"C:\\Users\\Kamal\\Desktop\\upwork\\zafar sir\\frontend_insurance\\node_modules\\vue-loader\\lib\\index.js","mtime":1653043264822}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQpAaW1wb3J0ICJ+QGNvcmUvc2Nzcy9iYXNlL3BhZ2VzL2FwcC1jaGF0LnNjc3MiOw0KQGltcG9ydCAifkBjb3JlL3Njc3MvYmFzZS9wYWdlcy9hcHAtY2hhdC1saXN0LnNjc3MiOw0K"},{"version":3,"sources":["Chat.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuYA;AACA","file":"Chat.vue","sourceRoot":"src/views/apps/chat","sourcesContent":["<template>\r\n  <!-- Need to add height inherit because Vue 2 don't support multiple root ele -->\r\n  <div style=\"height: inherit\">\r\n    <div\r\n      class=\"body-content-overlay\"\r\n      :class=\"{'show': shallShowUserProfileSidebar || shallShowActiveChatContactSidebar || mqShallShowLeftSidebar}\"\r\n      @click=\"mqShallShowLeftSidebar=shallShowActiveChatContactSidebar=shallShowUserProfileSidebar=false\"\r\n    />\r\n\r\n    <!-- Main Area -->\r\n    <section class=\"chat-app-window\">\r\n\r\n      <!-- Start Chat Logo -->\r\n      <div\r\n        v-if=\"!activeChat.contact\"\r\n        class=\"start-chat-area\"\r\n      >\r\n        <div class=\"mb-1 start-chat-icon\">\r\n          <feather-icon\r\n            icon=\"MessageSquareIcon\"\r\n            size=\"56\"\r\n          />\r\n        </div>\r\n        <h4\r\n          class=\"sidebar-toggle start-chat-text\"\r\n          @click=\"startConversation\"\r\n        >\r\n          Start Conversation\r\n        </h4>\r\n      </div>\r\n\r\n      <!-- Chat Content -->\r\n      <div\r\n        v-else\r\n        class=\"active-chat\"\r\n      >\r\n        <!-- Chat Navbar -->\r\n        <div class=\"chat-navbar\">\r\n          <header class=\"chat-header\">\r\n\r\n            <!-- Avatar & Name -->\r\n            <div class=\"d-flex align-items-center\">\r\n\r\n              <!-- Toggle Icon -->\r\n              <div class=\"sidebar-toggle d-block d-lg-none mr-1\">\r\n                <feather-icon\r\n                  icon=\"MenuIcon\"\r\n                  class=\"cursor-pointer\"\r\n                  size=\"21\"\r\n                  @click=\"mqShallShowLeftSidebar = true\"\r\n                />\r\n              </div>\r\n\r\n              <b-avatar\r\n                size=\"36\"\r\n                :src=\"activeChat.contact.avatar\"\r\n                class=\"mr-1 cursor-pointer badge-minimal\"\r\n                badge\r\n                :badge-variant=\"resolveAvatarBadgeVariant(activeChat.contact.status)\"\r\n                @click.native=\"shallShowActiveChatContactSidebar=true\"\r\n              />\r\n              <h6 class=\"mb-0\">\r\n                {{ activeChat.contact.fullName }}\r\n              </h6>\r\n            </div>\r\n\r\n            <!-- Contact Actions -->\r\n            <div class=\"d-flex align-items-center\">\r\n              <feather-icon\r\n                icon=\"PhoneCallIcon\"\r\n                size=\"17\"\r\n                class=\"cursor-pointer d-sm-block d-none mr-1\"\r\n              />\r\n              <feather-icon\r\n                icon=\"VideoIcon\"\r\n                size=\"17\"\r\n                class=\"cursor-pointer d-sm-block d-none mr-1\"\r\n              />\r\n              <feather-icon\r\n                icon=\"SearchIcon\"\r\n                size=\"17\"\r\n                class=\"cursor-pointer d-sm-block d-none mr-50\"\r\n              />\r\n              <div class=\"dropdown\">\r\n                <b-dropdown\r\n                  variant=\"link\"\r\n                  no-caret\r\n                  toggle-class=\"p-0\"\r\n                  right\r\n                >\r\n                  <template #button-content>\r\n                    <feather-icon\r\n                      icon=\"MoreVerticalIcon\"\r\n                      size=\"17\"\r\n                      class=\"align-middle text-body\"\r\n                    />\r\n                  </template>\r\n                  <b-dropdown-item>\r\n                    View Contact\r\n                  </b-dropdown-item>\r\n                  <b-dropdown-item>\r\n                    Mute Notifications\r\n                  </b-dropdown-item>\r\n                  <b-dropdown-item>\r\n                    Block Contact\r\n                  </b-dropdown-item>\r\n                  <b-dropdown-item>\r\n                    Clear Chat\r\n                  </b-dropdown-item>\r\n                  <b-dropdown-item>\r\n                    Report\r\n                  </b-dropdown-item>\r\n                </b-dropdown>\r\n              </div>\r\n            </div>\r\n          </header>\r\n        </div>\r\n\r\n        <!-- User Chat Area -->\r\n        <vue-perfect-scrollbar\r\n          ref=\"refChatLogPS\"\r\n          :settings=\"perfectScrollbarSettings\"\r\n          class=\"user-chats scroll-area\"\r\n        >\r\n          <chat-log\r\n            :chat-data=\"activeChat\"\r\n            :profile-user-avatar=\"profileUserDataMinimal.avatar\"\r\n          />\r\n        </vue-perfect-scrollbar>\r\n\r\n        <!-- Message Input -->\r\n        <b-form\r\n          class=\"chat-app-form\"\r\n          @submit.prevent=\"sendMessage\"\r\n        >\r\n          <b-input-group class=\"input-group-merge form-send-message mr-1\">\r\n            <b-form-input\r\n              v-model=\"chatInputMessage\"\r\n              placeholder=\"Enter your message\"\r\n            />\r\n          </b-input-group>\r\n          <b-button\r\n            variant=\"primary\"\r\n            type=\"submit\"\r\n          >\r\n            Send\r\n          </b-button>\r\n        </b-form>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- Active Chat Contact Details Sidebar -->\r\n    <chat-active-chat-content-details-sidedbar\r\n      :shall-show-active-chat-contact-sidebar.sync=\"shallShowActiveChatContactSidebar\"\r\n      :contact=\"activeChat.contact || {}\"\r\n    />\r\n\r\n    <!-- Sidebar -->\r\n    <portal to=\"content-renderer-sidebar-left\">\r\n      <chat-left-sidebar\r\n        :chats-contacts=\"chatsContacts\"\r\n        :contacts=\"contacts\"\r\n        :active-chat-contact-id=\"activeChat.contact ? activeChat.contact.id : null\"\r\n        :shall-show-user-profile-sidebar.sync=\"shallShowUserProfileSidebar\"\r\n        :profile-user-data=\"profileUserData\"\r\n        :profile-user-minimal-data=\"profileUserDataMinimal\"\r\n        :mq-shall-show-left-sidebar.sync=\"mqShallShowLeftSidebar\"\r\n        @show-user-profile=\"showUserProfileSidebar\"\r\n        @open-chat=\"openChatOfContact\"\r\n      />\r\n    </portal>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport store from '@/store'\r\nimport {\r\n  ref, onUnmounted, nextTick,\r\n} from '@vue/composition-api'\r\nimport {\r\n  BAvatar, BDropdown, BDropdownItem, BForm, BInputGroup, BFormInput, BButton,\r\n} from 'bootstrap-vue'\r\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar'\r\n// import { formatDate } from '@core/utils/filter'\r\nimport { $themeBreakpoints } from '@themeConfig'\r\nimport { useResponsiveAppLeftSidebarVisibility } from '@core/comp-functions/ui/app'\r\nimport ChatLeftSidebar from './ChatLeftSidebar.vue'\r\nimport chatStoreModule from './chatStoreModule'\r\nimport ChatActiveChatContentDetailsSidedbar from './ChatActiveChatContentDetailsSidedbar.vue'\r\nimport ChatLog from './ChatLog.vue'\r\nimport useChat from './useChat'\r\n\r\nexport default {\r\n  components: {\r\n\r\n    // BSV\r\n    BAvatar,\r\n    BDropdown,\r\n    BDropdownItem,\r\n    BForm,\r\n    BInputGroup,\r\n    BFormInput,\r\n    BButton,\r\n\r\n    // 3rd Party\r\n    VuePerfectScrollbar,\r\n\r\n    // SFC\r\n    ChatLeftSidebar,\r\n    ChatActiveChatContentDetailsSidedbar,\r\n    ChatLog,\r\n  },\r\n  setup() {\r\n    const CHAT_APP_STORE_MODULE_NAME = 'app-chat'\r\n\r\n    // Register module\r\n    if (!store.hasModule(CHAT_APP_STORE_MODULE_NAME)) store.registerModule(CHAT_APP_STORE_MODULE_NAME, chatStoreModule)\r\n\r\n    // UnRegister on leave\r\n    onUnmounted(() => {\r\n      if (store.hasModule(CHAT_APP_STORE_MODULE_NAME)) store.unregisterModule(CHAT_APP_STORE_MODULE_NAME)\r\n    })\r\n\r\n    const { resolveAvatarBadgeVariant } = useChat()\r\n\r\n    // Scroll to Bottom ChatLog\r\n    const refChatLogPS = ref(null)\r\n    const scrollToBottomInChatLog = () => {\r\n      const scrollEl = refChatLogPS.value.$el || refChatLogPS.value\r\n      scrollEl.scrollTop = scrollEl.scrollHeight\r\n    }\r\n\r\n    // ------------------------------------------------\r\n    // Chats & Contacts\r\n    // ------------------------------------------------\r\n    const chatsContacts = ref([])\r\n    const contacts = ref([])\r\n\r\n    const fetchChatAndContacts = () => {\r\n      store.dispatch('app-chat/fetchChatsAndContacts')\r\n        .then(response => {\r\n          chatsContacts.value = response.data.chatsContacts\r\n          contacts.value = response.data.contacts\r\n          // eslint-disable-next-line no-use-before-define\r\n          profileUserDataMinimal.value = response.data.profileUser\r\n        })\r\n    }\r\n\r\n    fetchChatAndContacts()\r\n\r\n    // ------------------------------------------------\r\n    // Single Chat\r\n    // ------------------------------------------------\r\n    const activeChat = ref({})\r\n    const chatInputMessage = ref('')\r\n    const openChatOfContact = userId => {\r\n      // Reset send message input value\r\n      chatInputMessage.value = ''\r\n\r\n      store.dispatch('app-chat/getChat', { userId })\r\n        .then(response => {\r\n          activeChat.value = response.data\r\n\r\n          // Set unseenMsgs to 0\r\n          const contact = chatsContacts.value.find(c => c.id === userId)\r\n          if (contact) contact.chat.unseenMsgs = 0\r\n\r\n          // Scroll to bottom\r\n          nextTick(() => { scrollToBottomInChatLog() })\r\n        })\r\n\r\n      // if SM device =>  Close Chat & Contacts left sidebar\r\n      // eslint-disable-next-line no-use-before-define\r\n      mqShallShowLeftSidebar.value = false\r\n    }\r\n    const sendMessage = () => {\r\n      if (!chatInputMessage.value) return\r\n      const payload = {\r\n        contactId: activeChat.value.contact.id,\r\n        // eslint-disable-next-line no-use-before-define\r\n        senderId: profileUserDataMinimal.value.id,\r\n        message: chatInputMessage.value,\r\n      }\r\n      store.dispatch('app-chat/sendMessage', payload)\r\n        .then(response => {\r\n          const { newMessageData, chat } = response.data\r\n\r\n          // ? If it's not undefined => New chat is created (Contact is not in list of chats)\r\n          if (chat !== undefined) {\r\n            activeChat.value = { chat, contact: activeChat.value.contact }\r\n            chatsContacts.value.push({\r\n              ...activeChat.value.contact,\r\n              chat: {\r\n                id: chat.id,\r\n                lastMessage: newMessageData,\r\n                unseenMsgs: 0,\r\n              },\r\n            })\r\n          } else {\r\n            // Add message to log\r\n            activeChat.value.chat.chat.push(newMessageData)\r\n          }\r\n\r\n          // Reset send message input value\r\n          chatInputMessage.value = ''\r\n\r\n          // Set Last Message for active contact\r\n          const contact = chatsContacts.value.find(c => c.id === activeChat.value.contact.id)\r\n          contact.chat.lastMessage = newMessageData\r\n\r\n          // Scroll to bottom\r\n          nextTick(() => { scrollToBottomInChatLog() })\r\n        })\r\n    }\r\n\r\n    const perfectScrollbarSettings = {\r\n      maxScrollbarLength: 150,\r\n    }\r\n\r\n    // User Profile Sidebar\r\n    // ? Will contain all details of profile user (e.g. settings, about etc.)\r\n    const profileUserData = ref({})\r\n    // ? Will contain id, name and avatar & status\r\n    const profileUserDataMinimal = ref({})\r\n\r\n    const shallShowUserProfileSidebar = ref(false)\r\n    const showUserProfileSidebar = () => {\r\n      store.dispatch('app-chat/getProfileUser')\r\n        .then(response => {\r\n          profileUserData.value = response.data\r\n          shallShowUserProfileSidebar.value = true\r\n        })\r\n    }\r\n\r\n    // Active Chat Contact Details\r\n    const shallShowActiveChatContactSidebar = ref(false)\r\n\r\n    // UI + SM Devices\r\n    // Left Sidebar Responsiveness\r\n    const { mqShallShowLeftSidebar } = useResponsiveAppLeftSidebarVisibility()\r\n    const startConversation = () => {\r\n      if (store.state.app.windowWidth < $themeBreakpoints.lg) {\r\n        mqShallShowLeftSidebar.value = true\r\n      }\r\n    }\r\n\r\n    return {\r\n      // Filters\r\n      // formatDate,\r\n\r\n      // useChat\r\n      resolveAvatarBadgeVariant,\r\n\r\n      // Chat & Contacts\r\n      chatsContacts,\r\n      contacts,\r\n\r\n      // Single Chat\r\n      refChatLogPS,\r\n      activeChat,\r\n      chatInputMessage,\r\n      openChatOfContact,\r\n      sendMessage,\r\n\r\n      // Profile User Minimal Data\r\n      profileUserDataMinimal,\r\n\r\n      // User Profile Sidebar\r\n      profileUserData,\r\n      shallShowUserProfileSidebar,\r\n      showUserProfileSidebar,\r\n\r\n      // Active Chat Contact Details\r\n      shallShowActiveChatContactSidebar,\r\n\r\n      // UI\r\n      perfectScrollbarSettings,\r\n\r\n      // UI + SM Devices\r\n      startConversation,\r\n      mqShallShowLeftSidebar,\r\n    }\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n\r\n</style>\r\n\r\n<style lang=\"scss\">\r\n@import \"~@core/scss/base/pages/app-chat.scss\";\r\n@import \"~@core/scss/base/pages/app-chat-list.scss\";\r\n</style>\r\n"]}]}