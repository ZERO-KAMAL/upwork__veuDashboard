{"remainingRequest":"C:\\Users\\Kamal\\Desktop\\upwork\\zafar sir\\frontend_insurance\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Kamal\\Desktop\\upwork\\zafar sir\\frontend_insurance\\src\\views\\apps\\todo\\TodoTaskHandlerSidebar.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"C:\\Users\\Kamal\\Desktop\\upwork\\zafar sir\\frontend_insurance\\src\\views\\apps\\todo\\TodoTaskHandlerSidebar.vue","mtime":1653043180886},{"path":"C:\\Users\\Kamal\\Desktop\\upwork\\zafar sir\\frontend_insurance\\node_modules\\css-loader\\dist\\cjs.js","mtime":1653043260894},{"path":"C:\\Users\\Kamal\\Desktop\\upwork\\zafar sir\\frontend_insurance\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1653043267607},{"path":"C:\\Users\\Kamal\\Desktop\\upwork\\zafar sir\\frontend_insurance\\node_modules\\postcss-loader\\src\\index.js","mtime":1653043263711},{"path":"C:\\Users\\Kamal\\Desktop\\upwork\\zafar sir\\frontend_insurance\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1653043258712},{"path":"C:\\Users\\Kamal\\Desktop\\upwork\\zafar sir\\frontend_insurance\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1653043258756},{"path":"C:\\Users\\Kamal\\Desktop\\upwork\\zafar sir\\frontend_insurance\\node_modules\\vue-loader\\lib\\index.js","mtime":1653043264822}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCkBpbXBvcnQgJ0Bjb3JlL3Njc3MvdnVlL2xpYnMvdnVlLXNlbGVjdC5zY3NzJzsNCkBpbXBvcnQgJ0Bjb3JlL3Njc3MvdnVlL2xpYnMvdnVlLWZsYXRwaWNrZXIuc2Nzcyc7DQpAaW1wb3J0ICdAY29yZS9zY3NzL3Z1ZS9saWJzL3F1aWxsLnNjc3MnOw0K"},{"version":3,"sources":["TodoTaskHandlerSidebar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuUA;AACA;AACA","file":"TodoTaskHandlerSidebar.vue","sourceRoot":"src/views/apps/todo","sourcesContent":["<template>\r\n  <div>\r\n    <b-sidebar\r\n      id=\"sidebar-task-handler\"\r\n      sidebar-class=\"sidebar-lg\"\r\n      :visible=\"isTaskHandlerSidebarActive\"\r\n      bg-variant=\"white\"\r\n      shadow\r\n      backdrop\r\n      no-header\r\n      right\r\n      @change=\"(val) => $emit('update:is-task-handler-sidebar-active', val)\"\r\n      @hidden=\"clearForm\"\r\n    >\r\n      <template #default=\"{ hide }\">\r\n        <!-- Header -->\r\n        <div class=\"d-flex justify-content-between align-items-center content-sidebar-header px-2 py-1\">\r\n          <b-button\r\n            v-if=\"taskLocal.id\"\r\n            size=\"sm\"\r\n            :variant=\"taskLocal.isCompleted ? 'outline-success' : 'outline-secondary'\"\r\n            @click=\"taskLocal.isCompleted = !taskLocal.isCompleted\"\r\n          >\r\n            {{ taskLocal.isCompleted ? 'Completed' : 'Mark Complete' }}\r\n          </b-button>\r\n          <h5\r\n            v-else\r\n            class=\"mb-0\"\r\n          >\r\n            Add Task\r\n          </h5>\r\n          <div>\r\n            <feather-icon\r\n              v-show=\"taskLocal.id\"\r\n              icon=\"TrashIcon\"\r\n              class=\"cursor-pointer\"\r\n              @click=\"$emit('remove-task'); hide();\"\r\n            />\r\n            <feather-icon\r\n              class=\"ml-1 cursor-pointer\"\r\n              icon=\"StarIcon\"\r\n              size=\"16\"\r\n              :class=\"{ 'text-warning': taskLocal.isImportant }\"\r\n              @click=\"taskLocal.isImportant = !taskLocal.isImportant\"\r\n            />\r\n            <feather-icon\r\n              class=\"ml-1 cursor-pointer\"\r\n              icon=\"XIcon\"\r\n              size=\"16\"\r\n              @click=\"hide\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Body -->\r\n        <validation-observer\r\n          #default=\"{ handleSubmit }\"\r\n          ref=\"refFormObserver\"\r\n        >\r\n\r\n          <!-- Form -->\r\n          <b-form\r\n            class=\"p-2\"\r\n            @submit.prevent=\"handleSubmit(onSubmit)\"\r\n            @reset.prevent=\"resetForm\"\r\n          >\r\n\r\n            <!-- Title -->\r\n            <validation-provider\r\n              #default=\"validationContext\"\r\n              name=\"Title\"\r\n              rules=\"required\"\r\n            >\r\n              <b-form-group\r\n                label=\"Title\"\r\n                label-for=\"task-title\"\r\n              >\r\n                <b-form-input\r\n                  id=\"task-title\"\r\n                  v-model=\"taskLocal.title\"\r\n                  autofocus\r\n                  :state=\"getValidationState(validationContext)\"\r\n                  trim\r\n                  placeholder=\"Task Title\"\r\n                />\r\n\r\n                <b-form-invalid-feedback>\r\n                  {{ validationContext.errors[0] }}\r\n                </b-form-invalid-feedback>\r\n              </b-form-group>\r\n            </validation-provider>\r\n\r\n            <!-- Assignee -->\r\n            <b-form-group\r\n              label=\"Assignee\"\r\n              label-for=\"assignee\"\r\n            >\r\n              <v-select\r\n                v-model=\"taskLocal.assignee\"\r\n                :dir=\"$store.state.appConfig.isRTL ? 'rtl' : 'ltr'\"\r\n                :options=\"assigneeOptions\"\r\n                label=\"fullName\"\r\n                class=\"assignee-selector\"\r\n                input-id=\"assignee\"\r\n              >\r\n\r\n                <template #option=\"{ avatar, fullName }\">\r\n                  <b-avatar\r\n                    size=\"26\"\r\n                    :src=\"avatar\"\r\n                  />\r\n                  <span class=\"ml-50 d-inline-block align-middle\"> {{ fullName }}</span>\r\n                </template>\r\n\r\n                <template #selected-option=\"{ avatar, fullName }\">\r\n                  <b-avatar\r\n                    size=\"26\"\r\n                    :src=\"avatar\"\r\n                    :variant=\"`light-${resolveAvatarVariant(taskLocal.tags)}`\"\r\n                    :text=\"avatarText(fullName)\"\r\n                  />\r\n\r\n                  <span class=\"ml-50 d-inline-block align-middle\"> {{ fullName }}</span>\r\n                </template>\r\n              </v-select>\r\n            </b-form-group>\r\n\r\n            <!-- due Date -->\r\n            <validation-provider\r\n              #default=\"validationContext\"\r\n              name=\"Due Date\"\r\n              rules=\"required\"\r\n            >\r\n\r\n              <b-form-group\r\n                label=\"Due Date\"\r\n                label-for=\"due-date\"\r\n              >\r\n                <flat-pickr\r\n                  v-model=\"taskLocal.dueDate\"\r\n                  class=\"form-control\"\r\n                />\r\n                <b-form-invalid-feedback :state=\"getValidationState(validationContext)\">\r\n                  {{ validationContext.errors[0] }}\r\n                </b-form-invalid-feedback>\r\n              </b-form-group>\r\n            </validation-provider>\r\n\r\n            <!--Tag -->\r\n            <b-form-group\r\n              label=\"Tag\"\r\n              label-for=\"tag\"\r\n            >\r\n              <v-select\r\n                v-model=\"taskLocal.tags\"\r\n                :dir=\"$store.state.appConfig.isRTL ? 'rtl' : 'ltr'\"\r\n                multiple\r\n                :close-on-select=\"false\"\r\n                :options=\"tagOptions\"\r\n                :reduce=\"option => option.value\"\r\n                input-id=\"tags\"\r\n              />\r\n            </b-form-group>\r\n\r\n            <!-- Description -->\r\n            <b-form-group\r\n              label=\"Description\"\r\n              label-for=\"task-description\"\r\n            >\r\n              <quill-editor\r\n                id=\"quil-content\"\r\n                v-model=\"taskLocal.description\"\r\n                :options=\"editorOption\"\r\n                class=\"border-bottom-0\"\r\n              />\r\n              <div\r\n                id=\"quill-toolbar\"\r\n                class=\"d-flex justify-content-end border-top-0\"\r\n              >\r\n                <!-- Add a bold button -->\r\n                <button class=\"ql-bold\" />\r\n                <button class=\"ql-italic\" />\r\n                <button class=\"ql-underline\" />\r\n                <button class=\"ql-align\" />\r\n                <button class=\"ql-link\" />\r\n              </div>\r\n            </b-form-group>\r\n\r\n            <!-- Form Actions -->\r\n            <div class=\"d-flex mt-2\">\r\n              <b-button\r\n                v-ripple.400=\"'rgba(255, 255, 255, 0.15)'\"\r\n                variant=\"primary\"\r\n                class=\"mr-2\"\r\n                type=\"submit\"\r\n              >\r\n                {{ taskLocal.id ? 'Update' : 'Add ' }}\r\n              </b-button>\r\n              <b-button\r\n                v-ripple.400=\"'rgba(186, 191, 199, 0.15)'\"\r\n                type=\"reset\"\r\n                variant=\"outline-secondary\"\r\n              >\r\n                Reset\r\n              </b-button>\r\n            </div>\r\n          </b-form>\r\n        </validation-observer>\r\n      </template>\r\n    </b-sidebar>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {\r\n  BSidebar, BForm, BFormGroup, BFormInput, BAvatar, BButton, BFormInvalidFeedback,\r\n} from 'bootstrap-vue'\r\nimport vSelect from 'vue-select'\r\nimport flatPickr from 'vue-flatpickr-component'\r\nimport Ripple from 'vue-ripple-directive'\r\nimport { ValidationProvider, ValidationObserver } from 'vee-validate'\r\nimport { required, email, url } from '@validations'\r\nimport { avatarText } from '@core/utils/filter'\r\nimport formValidation from '@core/comp-functions/forms/form-validation'\r\nimport { toRefs } from '@vue/composition-api'\r\nimport { quillEditor } from 'vue-quill-editor'\r\nimport useTaskHandler from './useTaskHandler'\r\n\r\nexport default {\r\n  components: {\r\n    // BSV\r\n    BButton,\r\n    BSidebar,\r\n    BForm,\r\n    BFormGroup,\r\n    BFormInput,\r\n    BAvatar,\r\n    BFormInvalidFeedback,\r\n\r\n    // 3rd party packages\r\n    vSelect,\r\n    flatPickr,\r\n    quillEditor,\r\n\r\n    // Form Validation\r\n    ValidationProvider,\r\n    ValidationObserver,\r\n  },\r\n  directives: {\r\n    Ripple,\r\n  },\r\n  model: {\r\n    prop: 'isTaskHandlerSidebarActive',\r\n    event: 'update:is-task-handler-sidebar-active',\r\n  },\r\n  props: {\r\n    isTaskHandlerSidebarActive: {\r\n      type: Boolean,\r\n      required: true,\r\n    },\r\n    task: {\r\n      type: Object,\r\n      required: true,\r\n    },\r\n    clearTaskData: {\r\n      type: Function,\r\n      required: true,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      required,\r\n      email,\r\n      url,\r\n    }\r\n  },\r\n  setup(props, { emit }) {\r\n    const {\r\n      taskLocal,\r\n      resetTaskLocal,\r\n\r\n      // UI\r\n      assigneeOptions,\r\n      onSubmit,\r\n      tagOptions,\r\n      resolveAvatarVariant,\r\n    } = useTaskHandler(toRefs(props), emit)\r\n\r\n    const {\r\n      refFormObserver,\r\n      getValidationState,\r\n      resetForm,\r\n      clearForm,\r\n    } = formValidation(resetTaskLocal, props.clearTaskData)\r\n\r\n    const editorOption = {\r\n      modules: {\r\n        toolbar: '#quill-toolbar',\r\n      },\r\n      placeholder: 'Write your description',\r\n    }\r\n\r\n    return {\r\n      // Add New\r\n      taskLocal,\r\n      onSubmit,\r\n      assigneeOptions,\r\n      tagOptions,\r\n\r\n      // Form Validation\r\n      resetForm,\r\n      clearForm,\r\n      refFormObserver,\r\n      getValidationState,\r\n\r\n      // UI\r\n      editorOption,\r\n      resolveAvatarVariant,\r\n\r\n      // Filter/Formatter\r\n      avatarText,\r\n    }\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import '@core/scss/vue/libs/vue-select.scss';\r\n@import '@core/scss/vue/libs/vue-flatpicker.scss';\r\n@import '@core/scss/vue/libs/quill.scss';\r\n</style>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import '~@core/scss/base/bootstrap-extended/include';\r\n\r\n.assignee-selector {\r\n  ::v-deep .vs__dropdown-toggle {\r\n  padding-left: 0;\r\n  }\r\n}\r\n\r\n#quil-content ::v-deep {\r\n  > .ql-container {\r\n    border-bottom: 0;\r\n  }\r\n\r\n  + #quill-toolbar {\r\n    border-top-left-radius: 0;\r\n    border-top-right-radius: 0;\r\n    border-bottom-left-radius: $border-radius;\r\n    border-bottom-right-radius: $border-radius;\r\n  }\r\n}\r\n</style>\r\n"]}]}