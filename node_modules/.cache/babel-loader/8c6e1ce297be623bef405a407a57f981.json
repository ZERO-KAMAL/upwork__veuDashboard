{"remainingRequest":"C:\\Users\\Kamal\\Desktop\\upwork\\frontend_insurance\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Kamal\\Desktop\\upwork\\frontend_insurance\\src\\views\\forms\\form-element\\form-tag\\code.js","dependencies":[{"path":"C:\\Users\\Kamal\\Desktop\\upwork\\frontend_insurance\\src\\views\\forms\\form-element\\form-tag\\code.js","mtime":1653043181393},{"path":"C:\\Users\\Kamal\\Desktop\\upwork\\frontend_insurance\\babel.config.js","mtime":1653043180287},{"path":"C:\\Users\\Kamal\\Desktop\\upwork\\frontend_insurance\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1653043258756},{"path":"C:\\Users\\Kamal\\Desktop\\upwork\\frontend_insurance\\node_modules\\babel-loader\\lib\\index.js","mtime":1653043263838}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Kamal/Desktop/upwork/frontend_insurance/src/views/forms/form-element/form-tag/code.js"],"names":["codeAdvanceCustom","codeBasic","codeCustom","codeDetecting","codeNativeInput","codeRemoval","codeSeparators","codeStyling","codeValidation"],"mappings":"AAAA,OAAO,IAAMA,iBAAiB,8nHAAvB;AAkIP,OAAO,IAAMC,SAAS,0bAAf;AA2BP,OAAO,IAAMC,UAAU,6/DAAhB;AA4EP,OAAO,IAAMC,aAAa,olCAAnB;AAoDP,OAAO,IAAMC,eAAe,goEAArB;AA8EP,OAAO,IAAMC,WAAW,60BAAjB;AAmCP,OAAO,IAAMC,cAAc,ilBAApB;AA+BP,OAAO,IAAMC,WAAW,kkBAAjB;AA+BP,OAAO,IAAMC,cAAc,8hDAApB","sourcesContent":["export const codeAdvanceCustom = `\r\n<template>\r\n  <div>\r\n    <b-form-group label=\"Tagged input using dropdown\">\r\n      <b-form-tags\r\n        v-model=\"value\"\r\n        no-outer-focus\r\n      >\r\n        <template v-slot=\"{ tags, disabled, addTag, removeTag }\">\r\n          <ul\r\n            v-if=\"tags.length > 0\"\r\n            class=\"list-inline d-inline-block mb-1\"\r\n          >\r\n            <li\r\n              v-for=\"tag in tags\"\r\n              :key=\"tag\"\r\n              class=\"list-inline-item\"\r\n            >\r\n              <b-form-tag\r\n                :title=\"tag\"\r\n                :disabled=\"disabled\"\r\n                variant=\"primary\"\r\n                @remove=\"removeTag(tag)\"\r\n              >\r\n                {{ tag }}\r\n              </b-form-tag>\r\n            </li>\r\n          </ul>\r\n\r\n          <b-dropdown\r\n            size=\"sm\"\r\n            variant=\"outline-secondary\"\r\n            block\r\n            menu-class=\"w-100\"\r\n          >\r\n            <template v-slot:button-content>\r\n              <b-icon icon=\"tag-fill\" /> Choose tags\r\n            </template>\r\n            <b-dropdown-form @submit.stop.prevent=\"() => {}\">\r\n              <b-form-group\r\n                label-for=\"tag-search-input\"\r\n                label=\"Search tags\"\r\n                label-cols-md=\"auto\"\r\n                class=\"mb-0\"\r\n                label-size=\"sm\"\r\n                :description=\"searchDesc\"\r\n                :disabled=\"disabled\"\r\n              >\r\n                <b-form-input\r\n                  id=\"tag-search-input\"\r\n                  v-model=\"search\"\r\n                  type=\"search\"\r\n                  size=\"sm\"\r\n                  autocomplete=\"off\"\r\n                />\r\n              </b-form-group>\r\n            </b-dropdown-form>\r\n            <b-dropdown-divider />\r\n            <b-dropdown-item\r\n              v-for=\"option in availableOptions\"\r\n              :key=\"option\"\r\n              @click=\"onOptionClick({ option, addTag })\"\r\n            >\r\n              {{ option }}\r\n            </b-dropdown-item>\r\n            <b-dropdown-text v-if=\"availableOptions.length === 0\">\r\n              There are no tags available to select\r\n            </b-dropdown-text>\r\n          </b-dropdown>\r\n        </template>\r\n      </b-form-tags>\r\n    </b-form-group>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {BFormTags,BFormGroup,BDropdown,BDropdownForm,BFormInput,BDropdownDivider,BDropdownItem,BFormTag,BDropdownText} from 'bootstrap-vue'\r\n\r\nexport default {\r\n  components: {\r\n    BFormTags,\r\n    BFormGroup,\r\n    BDropdown,\r\n    BDropdownForm,\r\n    BFormInput,\r\n    BDropdownDivider,\r\n    BDropdownItem,\r\n    BFormTag,\r\n    BDropdownText,\r\n  },\r\n  data: () => ({\r\n    options: ['Apple', 'Orange', 'Banana', 'Lime', 'Peach', 'Chocolate', 'Strawberry'],\r\n    search: '',\r\n    value: [],\r\n    codeAdvanceCustom,\r\n  }),\r\n  computed: {\r\n    criteria() {\r\n      // Compute the search criteria\r\n      return this.search.trim().toLowerCase()\r\n    },\r\n    availableOptions() {\r\n      const { criteria } = this\r\n\r\n      // Filter out already selected options\r\n      const options = this.options.filter(opt => this.value.indexOf(opt) === -1)\r\n      if (criteria) {\r\n        // Show only options that match criteria\r\n        return options.filter(opt => opt.toLowerCase().indexOf(criteria) > -1)\r\n      }\r\n\r\n      // Show all options available\r\n      return options\r\n    },\r\n    searchDesc() {\r\n      if (this.criteria && this.availableOptions.length === 0) {\r\n        return 'There are no tags matching your search criteria'\r\n      }\r\n      return ''\r\n    },\r\n  },\r\n  methods: {\r\n    onOptionClick({ option, addTag }) {\r\n      addTag(option)\r\n      this.search = ''\r\n    },\r\n  },\r\n}\r\n</script>\r\n`\r\nexport const codeBasic = `\r\n<template>\r\n  <div>\r\n    <label for=\"tags-basic\">Type a new tag and press enter</label>\r\n    <b-form-tags\r\n      v-model=\"value\"\r\n      input-id=\"tags-basic\"\r\n      class=\"mb-2\"\r\n    />\r\n    <p>Value: {{ value }}</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { BFormTags } from 'bootstrap-vue'\r\n\r\nexport default {\r\n  components: {\r\n    BFormTags,\r\n  },\r\n  data: () => ({\r\n    value: ['apple', 'orange'],\r\n  }),\r\n}\r\n</script>\r\n`\r\n\r\nexport const codeCustom = `\r\n<template>\r\n  <div>\r\n    <b-form-group label=\"Tagged input using select\">\r\n      <!-- prop \\`add-on - change\\` is needed to enable adding tags vie the \\`change\\` event -->\r\n      <b-form-tags\r\n        v-model=\"value\"\r\n        size=\"lg\"\r\n        add-on-change\r\n        no-outer-focus\r\n      >\r\n        <template v-slot=\"{ tags, inputAttrs, inputHandlers, disabled, removeTag }\">\r\n          <ul\r\n            v-if=\"tags.length > 0\"\r\n            class=\"list-inline d-inline-block mb-1\"\r\n          >\r\n            <li\r\n              v-for=\"tag in tags\"\r\n              :key=\"tag\"\r\n              class=\"list-inline-item\"\r\n            >\r\n              <b-form-tag\r\n                :title=\"tag\"\r\n                :disabled=\"disabled\"\r\n                variant=\"primary\"\r\n                @remove=\"removeTag(tag)\"\r\n              >\r\n                {{ tag }}\r\n              </b-form-tag>\r\n            </li>\r\n          </ul>\r\n          <b-form-select\r\n            v-bind=\"inputAttrs\"\r\n            :disabled=\"disabled || availableOptions.length === 0\"\r\n            :options=\"availableOptions\"\r\n            v-on=\"inputHandlers\"\r\n          >\r\n            <template v-slot:first>\r\n              <!-- This is required to prevent bugs with Safari -->\r\n              <option\r\n                disabled\r\n                value=\"\"\r\n              >\r\n                Choose a tag...\r\n              </option>\r\n            </template>\r\n          </b-form-select>\r\n        </template>\r\n      </b-form-tags>\r\n    </b-form-group>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {BFormTags, BFormTag, BFormGroup, BFormSelect} from 'bootstrap-vue'\r\n\r\nexport default {\r\n  components: {\r\n    BFormTags,\r\n    BFormGroup,\r\n    BFormSelect,\r\n    BFormTag,\r\n  },\r\n  data: () => ({\r\n    options: ['Apple', 'Orange', 'Banana', 'Lime', 'Peach', 'Chocolate', 'Strawberry'],\r\n    value: [],\r\n    codeCustom,\r\n  }),\r\n  computed: {\r\n    availableOptions() {\r\n      return this.options.filter(opt => this.value.indexOf(opt) === -1)\r\n    },\r\n  },\r\n}\r\n</script>\r\n`\r\nexport const codeDetecting = `\r\n<template>\r\n  <div>\r\n    <label for=\"tags-state-event\">Enter tags</label>\r\n    <b-form-tags\r\n      v-model=\"tags\"\r\n      input-id=\"tags-state-event\"\r\n      :tag-validator=\"validator\"\r\n      placeholder=\"Enter tags (3-5 characters) separated by space\"\r\n      separator=\" \"\r\n      @tag-state=\"onTagState\"\r\n    />\r\n    <p class=\"mt-2\">\r\n      Tags: {{ tags }}\r\n    </p>\r\n    <p>Event values:</p>\r\n    <ul>\r\n      <li>validTags: {{ validTags }}</li>\r\n      <li>invalidTags: {{ invalidTags }}</li>\r\n      <li>duplicateTags: {{ duplicateTags }}</li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { BFormTags } from 'bootstrap-vue'\r\n\r\nexport default {\r\n  components: {\r\n    BFormTags,\r\n  },\r\n  data: () => ({\r\n    tags: [],\r\n    validTags: [],\r\n    invalidTags: [],\r\n    duplicateTags: [],\r\n    codeDetecting,\r\n  }),\r\n  methods: {\r\n    onTagState(valid, invalid, duplicate) {\r\n      this.validTags = valid\r\n      this.invalidTags = invalid\r\n      this.duplicateTags = duplicate\r\n    },\r\n    validator(tag) {\r\n      return tag.length > 2 && tag.length < 6\r\n    },\r\n  },\r\n}\r\n</script>\r\n`\r\n\r\nexport const codeNativeInput = `\r\n<template>\r\n  <div>\r\n    <b-form-tags\r\n      v-model=\"value\"\r\n      no-outer-focus\r\n    >\r\n      <template #\"{ tags, inputAttrs, inputHandlers, addTag, removeTag }\">\r\n        <b-input-group aria-controls=\"my-custom-tags-list\">\r\n          <input\r\n            v-bind=\"inputAttrs\"\r\n            placeholder=\"New tag - Press enter to add\"\r\n            class=\"form-control\"\r\n            v-on=\"inputHandlers\"\r\n          >\r\n          <b-input-group-append>\r\n            <b-button\r\n              variant=\"primary\"\r\n              @click=\"addTag()\"\r\n            >\r\n              Add\r\n            </b-button>\r\n          </b-input-group-append>\r\n        </b-input-group>\r\n        <ul\r\n          id=\"my-custom-tags-list\"\r\n          class=\"list-unstyled d-inline-flex flex-wrap mb-0\"\r\n          aria-live=\"polite\"\r\n          aria-atomic=\"false\"\r\n          aria-relevant=\"additions removals\"\r\n        >\r\n          <!-- Always use the tag value as the :key, not the index! -->\r\n          <!-- Otherwise screen readers will not read the tag\r\n             additions and removals correctly -->\r\n          <b-card\r\n            v-for=\"tag in tags\"\r\n            :id=\"\\`my-custom-tags-tag_\\${tag.replace(/\\\\s/g, '_')}_\\`\"\r\n            :key=\"tag\"\r\n            tag=\"li\"\r\n            class=\"shadow-none border mt-1 mr-1 mb-0\"\r\n            body-class=\"py-1 pr-2 text-nowrap\"\r\n          >\r\n            <strong>{{ tag }}</strong>\r\n            <b-button\r\n              variant=\"link\"\r\n              size=\"sm\"\r\n              :aria-controls=\"\\`my-custom-tags-tag_\\${tag.replace(/\\\\s/g, '_')}_\\`\"\r\n              class=\"py-0\"\r\n              @click=\"removeTag(tag)\"\r\n            >\r\n              remove\r\n            </b-button>\r\n          </b-card>\r\n        </ul>\r\n      </template>\r\n    </b-form-tags>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {\r\n  BFormTags, BInputGroup, BInputGroupAppend, BCard, BButton,\r\n} from 'bootstrap-vue'\r\n\r\nexport default {\r\n  components: {\r\n    BFormTags,\r\n    BInputGroup,\r\n    BCard,\r\n    BButton,\r\n    BInputGroupAppend,\r\n  },\r\n  data: () => ({\r\n    value: ['apple', 'orange', 'banana', 'pear', 'peach'],\r\n  }),\r\n}\r\n</script>\r\n`\r\nexport const codeRemoval = `\r\n<template>\r\n  <div>\r\n    <label for=\"tags-remove-on-delete\">Enter new tags separated by space</label>\r\n    <b-form-tags\r\n      v-model=\"value\"\r\n      input-id=\"tags-remove-on-delete\"\r\n      :input-attrs=\"{ 'aria-describedby': 'tags-remove-on-delete-help' }\"\r\n      separator=\" \"\r\n      placeholder=\"Enter new tags separated by space\"\r\n      remove-on-delete\r\n      no-add-on-enter\r\n      class=\"mb-2\"\r\n    />\r\n    <b-form-text id=\"tags-remove-on-delete-help\">\r\n      Press <kbd>Backspace</kbd> to remove the last tag entered\r\n    </b-form-text>\r\n    <p>Value: {{ value }}</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { BFormTags, BFormText } from 'bootstrap-vue'\r\n\r\nexport default {\r\n  components: {\r\n    BFormTags,\r\n    BFormText,\r\n  },\r\n  data: () => ({\r\n    value: ['apple', 'orange', 'grape'],\r\n  }),\r\n}\r\n</script>\r\n`\r\nexport const codeSeparators = `\r\n<template>\r\n  <div>\r\n    <label for=\"tags-separators\">Enter tags separated by space, comma or semicolon</label>\r\n    <b-form-tags\r\n      v-model=\"value\"\r\n      input-id=\"tags-separators\"\r\n      separator=\" ,;\"\r\n      placeholder=\"Enter new tags separated by space, comma or semicolon\"\r\n      no-add-on-enter\r\n      class=\"mb-2\"\r\n    />\r\n    <p>Value: {{ value }}</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { BFormTags } from 'bootstrap-vue'\r\n\r\nexport default {\r\n  components: {\r\n    BFormTags,\r\n  },\r\n  data: () => ({\r\n    value: ['one', 'two'],\r\n  }),\r\n}\r\n</script>\r\n\r\n`\r\n\r\nexport const codeStyling = `\r\n<template>\r\n  <div>\r\n    <label for=\"tags-pills\">Enter tags</label>\r\n    <b-form-tags\r\n      v-model=\"value\"\r\n      input-id=\"tags-pills\"\r\n      tag-variant=\"primary\"\r\n      tag-pills\r\n      size=\"lg\"\r\n      separator=\" \"\r\n      placeholder=\"Enter new tags separated by space\"\r\n      class=\"mb-2\"\r\n    />\r\n    <p>Value: {{ value }}</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { BFormTags } from 'bootstrap-vue'\r\n\r\nexport default {\r\n  components: {\r\n    BFormTags,\r\n  },\r\n  data: () => ({\r\n    value: ['apple', 'orange', 'grape'],\r\n  }),\r\n}\r\n</script>\r\n`\r\nexport const codeValidation = `\r\n<template>\r\n  <div>\r\n    <b-form-group\r\n      :state=\"state\"\r\n      label=\"Tags validation example\"\r\n      label-for=\"tags-validation\"\r\n    >\r\n      <b-form-tags\r\n        v-model=\"tags\"\r\n        input-id=\"tags-validation\"\r\n        :input-attrs=\"{ 'aria-describedby': 'tags-validation-help' }\"\r\n        :state=\"state\"\r\n        :tag-validator=\"tagValidator\"\r\n        separator=\" \"\r\n      />\r\n      <!-- The following slots are for b-form-group -->\r\n      <template #invalid-feedback>\r\n        You must provide at least 3 tags and no more than 8\r\n      </template>\r\n      <template #description>\r\n        <div id=\"tags-validation-help\">\r\n          Tags must be 3 to 5 characters in length and all lower case. Enter tags separated by spaces or press enter.\r\n        </div>\r\n      </template>\r\n    </b-form-group>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { BFormTags, BFormGroup } from 'bootstrap-vue'\r\n\r\nexport default {\r\n  components: {\r\n    BFormTags,\r\n    BFormGroup,\r\n  },\r\n  data: () => ({\r\n    tags: [],\r\n    dirty: false,\r\n    codeValidation,\r\n  }),\r\n  computed: {\r\n    state() {\r\n      // Overall component validation state\r\n      return this.dirty ? this.tags.length > 2 && this.tags.length < 9 : null\r\n    },\r\n  },\r\n  watch: {\r\n    tags() {\r\n      // Set the dirty flag on first change to the tags array\r\n      this.dirty = true\r\n    },\r\n  },\r\n  methods: {\r\n    tagValidator(tag) {\r\n      // Individual tag validator function\r\n      return tag === tag.toLowerCase() && tag.length > 2 && tag.length < 6\r\n    },\r\n  },\r\n}\r\n</script>\r\n`\r\n"]}]}